package com.sundeep.Rado_Whatsapp_Toolkit;

import android.os.Environment;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
//import com.sundeep.Rado_Whatsapp_Toolkit.Addons.StickerGenerator.constants.Constants;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class Broadcaster_JSON {

//    public static String FILE_LOCATION= Constants.BROADCASTER_RECORDS_JSON_FILE;
    public static String FILE_LOCATION= Environment.getExternalStorageDirectory()+"/Rado/";
    public static String FILE_LOCATION_PINNED= Environment.getExternalStorageDirectory()+"/Rado/";

    static FileWriter fileWriter;

    public static boolean getJsonFile_Availability() {
        boolean result=true;

        File file;
        file=new File(FILE_LOCATION+"records.json");
        if(!file.exists())
        {
            result=false;
        }
        return result;
    }

    public static String loadJSONFromAsset() {
        String json = null;
        File file=new File(FILE_LOCATION+"records.json");
        try {
            InputStream contentsInputStream = new FileInputStream(file);
            InputStream is = contentsInputStream;
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        return json;
    }

    public static void createJsonFile() throws IOException, JSONException {


        File dir=new File(FILE_LOCATION);
        if(!dir.exists())
        {
            dir.mkdir();
        }


        File file;
        file=new File(FILE_LOCATION+"records.json");
        if(!file.exists())
        {
            file.createNewFile();
        }



        JSONObject obj = new JSONObject();
        obj.put("Generated by", "Rado");
        obj.put("Attention", "Deleting or altering the data will result in unexpected behaviour of application.");

        JSONArray categories = new JSONArray();
        categories.put("OTHERS");

        obj.put("categories", categories);

        JSONArray broadcasts = new JSONArray();

        obj.put("broadcasts", broadcasts);


        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(obj.toString());

        fileWriter.flush();
        fileWriter.close();



    }

    public static void addBroadcaster(String name, String desc,String category,boolean isStatusBroadcaster,
                                      String workManagerID, boolean remindMe,String reminderMode,
                                      String reminderTime, String reminderDate, ArrayList<String> reminderDays,
                                      boolean isAutoBackupRequired) throws IOException, JSONException {

        if(reminderTime==null)
        {
            reminderTime="";
        }

        if(reminderDate==null)
        {
            reminderDate="";
        }

        JSONObject Whole_obj=new JSONObject(loadJSONFromAsset());
        JSONArray broadcasts= Whole_obj.getJSONArray("broadcasts");

        JSONObject details_obj=new JSONObject();

        details_obj.put("id",getId());
        details_obj.put("name",name+"");
        details_obj.put("description",desc+"");
        details_obj.put("category",category+"");
        details_obj.put("isStatusBroadcaster",isStatusBroadcaster);
        details_obj.put("workManagerID",workManagerID+"");
        details_obj.put("remindMe",remindMe);

        JSONObject reminder_obj=new JSONObject();

        reminder_obj.put("reminderMode",reminderMode+"");
        reminder_obj.put("reminderTime",reminderTime+"");
        reminder_obj.put("reminderDate",reminderDate+"");

        JSONArray reminder_days_arr=new JSONArray();

        for(int i=0;i<reminderDays.size();i++)
        {
            reminder_days_arr.put(reminderDays.get(i));
        }

        reminder_obj.put("reminderDays",reminder_days_arr);

        details_obj.put("reminderDetails",reminder_obj);
        details_obj.put("isAutoBackupRequired",isAutoBackupRequired);
        details_obj.put("isBackupUpToDate",false);
        details_obj.put("driveFolderID",12345);
        details_obj.put("driveFolderPath","null");

        JSONArray localFilePaths = new JSONArray();

        details_obj.put("localFilePaths",localFilePaths);

        JSONArray yetToBackupFilePaths = new JSONArray();

        details_obj.put("yetToBackupFilePaths",yetToBackupFilePaths);

        broadcasts.put(details_obj);
        Whole_obj.put("broadcasts", broadcasts);

        File file;

        file=new File(FILE_LOCATION+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();


    }

    public static void addCategories(String category) throws JSONException, IOException {
        JSONObject Whole_obj=new JSONObject(loadJSONFromAsset());
        JSONArray categories= Whole_obj.getJSONArray("categories");

        categories.put(category+"");
        Whole_obj.put("categories", categories);

        File file;

        file=new File(FILE_LOCATION+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();

    }

    public static ArrayList getCategories() throws JSONException, IOException {
        ArrayList<String> categories_list=new ArrayList<>();
        JSONObject Whole_obj=new JSONObject(loadJSONFromAsset());
        int available_categories=Whole_obj.getJSONArray("categories").length();
        JSONArray categories_arr= Whole_obj.getJSONArray("categories");

        for(int i=0;i<available_categories;i++)
        {
            categories_list.add(categories_arr.getString(i));
        }

        return categories_list;

    }

    public static JSONObject getBroadcastDetailsAsJsonObject() throws JSONException {

        JSONObject detailsObj=new JSONObject(loadJSONFromAsset());

        return detailsObj;
    }


    public static String getId(){
        return String.valueOf(System.currentTimeMillis());
    }

    public static void deleteBroadcaster(int position) throws JSONException, IOException {

        Boolean result=false;
        JSONObject Whole_obj=new JSONObject(loadJSONFromAsset());
        int broadcasts_size=Whole_obj.getJSONArray("broadcasts").length();
        JSONArray broadcasts_arr= Whole_obj.getJSONArray("broadcasts");

        broadcasts_arr.remove(position);

        File file=new File(FILE_LOCATION+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }

    public static void deleteCategory(String category) throws JSONException, IOException {

        Boolean result=false;
        JSONObject Whole_obj=new JSONObject(loadJSONFromAsset());
        int categories_size=Whole_obj.getJSONArray("categories").length();
        JSONArray categories_arr= Whole_obj.getJSONArray("categories");

        for(int i=0;i<categories_size;i++)
        {
            if(categories_arr.getString(i).trim().equals(category.trim()))
            {
                categories_arr.remove(i);
            }
        }


        File file=new File(FILE_LOCATION+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }



    public static JSONObject getBroadcastDetailsObject(String ID) throws JSONException {

        JSONObject resultObject = null;

        JSONObject Whole_obj=new JSONObject(loadJSONFromAsset());
        int broadcasts_size=Whole_obj.getJSONArray("broadcasts").length();
        JSONArray broadcasts_arr= Whole_obj.getJSONArray("broadcasts");
        JSONObject arr=null;

        for(int i=0;i<broadcasts_size;i++)
        {
            arr = broadcasts_arr.getJSONObject(i);

            if(arr.getString("id").equals(ID))
            {
                //System.out.println("FOUND "+i);
                resultObject=arr;

            }



        }

        return resultObject;

    }

//    String DATA_Name;
//    String DATA_New_Category;
//    String DATA_Category;
//    String DATA_reminderMode="Once";
//    boolean DATA_remindMe=false;
//    String DATA_Time;
//    String DATA_Date;
//    ArrayList<String> DATA_Days=new ArrayList<>();
//    boolean DATA_isAutoBackupRequired=false;
//    boolean DATA_isStatusBroadcaster=false;
//    String DATA_WorkManagerID;
//    boolean isUpdatingForm=false;


    public static void updateBroadcastDetails(String ID,String name, String desc,String category,boolean isStatusBroadcaster,
                                              boolean remindMe,String reminderMode,
                                              String reminderTime, String reminderDate, ArrayList<String> reminderDays,
                                              boolean isAutoBackupRequired) throws JSONException, IOException {

        JSONObject Whole_obj = new JSONObject(loadJSONFromAsset());
        int broadcasts_size = Whole_obj.getJSONArray("broadcasts").length();
        JSONArray broadcasts_arr = Whole_obj.getJSONArray("broadcasts");

        JSONObject arr = null;

        for (int i = 0; i < broadcasts_size; i++) {
            arr = broadcasts_arr.getJSONObject(i);
            if(arr.getString("id").trim().equals(ID.trim()))
            {
                arr.put("name",name+"");
                arr.put("description",desc+"");
                arr.put("category",category+"");
                arr.put("isStatusBroadcaster",isStatusBroadcaster);
                arr.put("remindMe",remindMe);

                JSONObject reminderObject=arr.getJSONObject("reminderDetails");


                reminderObject.put("reminderMode",reminderMode+"");
                reminderObject.put("reminderTime",reminderTime+"");
                reminderObject.put("reminderDate",reminderDate+"");

                JSONArray reminder_days_arr=reminderObject.getJSONArray("reminderDays");

                while(reminder_days_arr.length()>0)
                {
                    reminder_days_arr.remove(0);    // cleaning the array
                }

                for(int j=0;j<reminderDays.size();j++)
                {
                    reminder_days_arr.put(reminderDays.get(j));
                }

                arr.put("isAutoBackupRequired",isAutoBackupRequired);
                arr.put("isStatusBroadcaster",isStatusBroadcaster);
            }

        }

        File file;
        file=new File(FILE_LOCATION+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();

    }


    public static JSONObject getGroupDetailsFromJsonFile()  {
        JSONObject Whole_obj = null;
        JSONObject foldersResultObject=new JSONObject();
        try {
            Whole_obj = new JSONObject(loadPinnedJSONFromAsset());

            JSONArray folderNamesArray=(JSONArray) Whole_obj.get("FolderNames");
            JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");
            foldersResultObject=new JSONObject();
            foldersResultObject.put("FolderNames",folderNamesArray);
            foldersResultObject.put("FolderDetailsHashmap",foldersDetailsHashmap);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return foldersResultObject;

    }

    public static void updateGroupDetailsInJson(List<String> folderNamesArray, HashMap<String, ArrayList<JSONObject>> folderGroupDetails) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONArray folderNamesJsonArray = new JSONArray(folderNamesArray);
        Whole_obj.put("FolderNames",folderNamesJsonArray);

        JSONObject folderGroupDetailsJsonObject=new JSONObject();
        for(int i=0;i<folderNamesArray.size();i++){
            ArrayList<JSONObject> folderGroupArray=new ArrayList<JSONObject>(folderGroupDetails.get(folderNamesArray.get(i)));
            //Remove Add new group element
            folderGroupArray.remove(0);
            JSONArray groupNamesArrayInFolderJson=new JSONArray(folderGroupArray);
            folderGroupDetailsJsonObject.put(folderNamesArray.get(i),groupNamesArrayInFolderJson);
        }

        Whole_obj.put("FolderDetailsHashmap",folderGroupDetailsJsonObject);

        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();


    }


    public static void addFolderInJson(String folderName) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONArray folderNamesJsonArray=(JSONArray) Whole_obj.get("FolderNames");
        folderNamesJsonArray.put(folderName);
        Whole_obj.put("FolderNames",folderNamesJsonArray);
        JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");
        foldersDetailsHashmap.put(folderName,new JSONArray());
        Whole_obj.put("FolderDetailsHashmap",foldersDetailsHashmap);
        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }

    public static void updateFolderInJson(String oldFolderName,String newFolderName) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONArray folderNamesJsonArray=(JSONArray) Whole_obj.get("FolderNames");
        if (folderNamesJsonArray != null) {
            for (int i=0;i<folderNamesJsonArray.length();i++){
                if(folderNamesJsonArray.getString(i).equals(oldFolderName)){
                    folderNamesJsonArray.put(i,newFolderName);
                }
            }
        }

        JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");
        foldersDetailsHashmap.put(newFolderName, foldersDetailsHashmap.remove(oldFolderName));
        Whole_obj.put("FolderNames",folderNamesJsonArray);
        Whole_obj.put("FolderDetailsHashmap",foldersDetailsHashmap);
        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }

    public static void deleteFolderInJson(String folderName) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONArray folderNamesJsonArray=(JSONArray) Whole_obj.get("FolderNames");
        if (folderNamesJsonArray != null) {
            for (int i=0;i<folderNamesJsonArray.length();i++){
                if(folderNamesJsonArray.getString(i).equals(folderName)){
                    folderNamesJsonArray.remove(i);
                }
            }
        }
        JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");
        foldersDetailsHashmap.remove(folderName);
        Whole_obj.put("FolderNames",folderNamesJsonArray);
        Whole_obj.put("FolderDetailsHashmap",foldersDetailsHashmap);
        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }

    public static void addGroupInJson(String folderName,JSONObject groupJsonObject) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");

        JSONArray folderGroupArrayJson=(JSONArray) foldersDetailsHashmap.get(folderName);
        folderGroupArrayJson.put(groupJsonObject);
        foldersDetailsHashmap.put(folderName,folderGroupArrayJson);

        Whole_obj.put("FolderDetailsHashmap",foldersDetailsHashmap);
        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();

    }

    public static void updateGroupInJson(String folderName,int groupPosition,String newGroupName) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");

        JSONArray folderGroupArrayJson=(JSONArray) foldersDetailsHashmap.get(folderName);
        JSONObject groupObject=(JSONObject) folderGroupArrayJson.get(groupPosition);
        groupObject.put("groupName",newGroupName);
        folderGroupArrayJson.put(groupPosition,groupObject);
        foldersDetailsHashmap.put(folderName,folderGroupArrayJson);

        Whole_obj.put("FolderDetailsHashmap",foldersDetailsHashmap);
        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();

    }

    public static void deleteGroupInJson(String folderName,int groupPosition) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");

        JSONArray folderGroupArrayJson=(JSONArray) foldersDetailsHashmap.get(folderName);
        folderGroupArrayJson.remove(groupPosition);
        foldersDetailsHashmap.put(folderName,folderGroupArrayJson);

        Whole_obj.put("FolderDetailsHashmap",foldersDetailsHashmap);
        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());
        fileWriter.flush();
        fileWriter.close();
    }



    public static boolean getPinnedJsonFile_Availability() {
        boolean result=true;

        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");
        if(!file.exists())
        {
            result=false;
        }
        return result;
    }

    public static String loadPinnedJSONFromAsset() {
        String json = null;
        File file=new File(FILE_LOCATION_PINNED+"records.json");
        try {
            InputStream contentsInputStream = new FileInputStream(file);
            InputStream is = contentsInputStream;
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();
            json = new String(buffer, "UTF-8");
        } catch (IOException ex) {
            ex.printStackTrace();
            return null;
        }
        return json;
    }

    public static void createPinnedJsonFile() throws IOException, JSONException {

        File dir=new File(FILE_LOCATION_PINNED);
        if(!dir.exists())
        {
            dir.mkdir();
        }


        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");
        if(!file.exists())
        {
            file.createNewFile();
        }



        JSONObject obj = new JSONObject();
        //    JSONArray folderNamesJsonArray=(JSONArray) Whole_obj.get("FolderNames");

        obj.put("FolderNames", new JSONArray());
        obj.put("FolderDetailsHashmap", new JSONObject());

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }


//    JSONArray folderNamesJsonArray=(JSONArray) Whole_obj.get("FolderNames");
//        if (folderNamesJsonArray != null) {
//        for (int i=0;i<folderNamesJsonArray.length();i++){
//            if(folderNamesJsonArray.getString(i).equals(folderName)){
//                folderNamesJsonArray.remove(i);
//            }
//        }
//    }
//    JSONObject foldersDetailsHashmap=(JSONObject) Whole_obj.get("FolderDetailsHashmap");



//    Drive updates

    // Check if root folder of broadcaster exists in drive

    public static String getBroadCastRootInDrive() throws JSONException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        String rootFolderId=(String) Whole_obj.get("RootFolderDriveId");
        return rootFolderId;
    }

    public static void writeBroadcastRootFolderId(String folderId) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        Whole_obj.put("RootFolderDriveId",folderId);

        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");
        if(!file.exists())
        {
            file.createNewFile();
        }

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }


    public static void writeBroadcasterFolderId(String broadcastId,String folderId) throws JSONException, IOException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
//        Whole_obj.put("RootFolderDriveId",folderId);

        JSONArray broadcastArray=Whole_obj.getJSONArray("broadcasts");
        if(broadcastArray!=null){
            for(int i=0;i<broadcastArray.length();i++){
                JSONObject broadcastObject=(JSONObject) broadcastArray.get(i);
                if(broadcastObject.get("id").equals(broadcastId)){
                    broadcastObject.put("driveFolderID",folderId);
                    broadcastArray.put(i,broadcastObject);
                    Whole_obj.put("broadcasts",broadcastArray);
                }
            }
        }

        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");
        if(!file.exists())
        {
            file.createNewFile();
        }

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
    }


    public static String getBroadCastDriveFolderId(String broadcastId) throws JSONException {
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONArray broadcastsArray=Whole_obj.getJSONArray("broadcasts");
        for(int i=0;i<broadcastsArray.length();i++){
            JSONObject broadcastObject=(JSONObject) broadcastsArray.get(i);
            if(broadcastObject.get("id").equals(broadcastId)){
                return broadcastObject.getString("driveFolderID");
            }
        }
        return null;
    }

    public static void updateUploadFileToTrue(String broadcastId,int index){
        JSONObject Whole_obj = null;
        try {
            Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
        JSONArray broadcastsArray=Whole_obj.getJSONArray("broadcasts");
        for(int i=0;i<broadcastsArray.length();i++) {
            JSONObject broadcastObject = (JSONObject) broadcastsArray.get(i);
            System.out.println("id:" + broadcastObject.get("id"));
            if (broadcastObject.get("id").equals(broadcastId)) {
                JSONArray yetToBackupArray=broadcastObject.getJSONArray("yetToBackupFilePaths");
                JSONObject yetToBackupObj=yetToBackupArray.getJSONObject(index);
                yetToBackupObj.put("caption","true");
                yetToBackupArray.put(index,yetToBackupObj);
                broadcastObject.put("yetToBackupFilePaths",yetToBackupArray);
                broadcastsArray.put(i,broadcastObject);
                Whole_obj.put("broadcasts",broadcastsArray);
            }
        }

        File file;
        file=new File(FILE_LOCATION_PINNED+"records.json");
        if(!file.exists())
        {
            file.createNewFile();
        }

        fileWriter = new FileWriter(file.getAbsolutePath());
        fileWriter.write(Whole_obj.toString());

        fileWriter.flush();
        fileWriter.close();
        } catch (JSONException e) {
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }

    }


    public static JSONObject getBackupFiles(String broadcastId) throws JSONException, IOException{
        JSONObject Whole_obj = new JSONObject(loadPinnedJSONFromAsset());

        JSONArray broadcastsArray=Whole_obj.getJSONArray("broadcasts");

//        ArrayList<String> localFilePaths=new ArrayList<String>();
//        ArrayList<String> yetToBackupFilePaths=new ArrayList<String>();
//        ArrayList<String> alreadyBackedupFilePaths=new ArrayList<String>();

        HashMap<String,Boolean> localFilePathsHM=new HashMap<String,Boolean>();
        HashMap<String,Boolean> alreadyBackedupFilePathsHM=new HashMap<String,Boolean>();
        JSONArray yetToBackupFilePaths=new JSONArray();
        JSONArray removePaths=new JSONArray();


        for(int i=0;i<broadcastsArray.length();i++){
            JSONObject broadcastObject=(JSONObject) broadcastsArray.get(i);
            System.out.println("id:"+broadcastObject.get("id"));
            if(broadcastObject.get("id").equals(broadcastId)){

                JSONArray localFiles=broadcastObject.getJSONArray("localFilePaths");
                for(int j=0;j<localFiles.length();j++){
                    JSONObject localFile=localFiles.getJSONObject(j);
                    localFilePathsHM.put(localFile.get("path").toString(),true);
                }

                JSONArray yetToBackupArray=broadcastObject.getJSONArray("yetToBackupFilePaths");
                for(int j=0;j<yetToBackupArray.length();j++){
                    JSONObject yetToBackupObj=yetToBackupArray.getJSONObject(j);
                    if(yetToBackupObj.getString("caption").equals("true")){
                        alreadyBackedupFilePathsHM.put(yetToBackupObj.getString("path"),true);
                    }
                }

                System.out.println("l:"+localFilePathsHM);
                System.out.println("a:"+alreadyBackedupFilePathsHM);

                for(int j=0;j<yetToBackupArray.length();j++){
                    JSONObject yetToBackupObj=yetToBackupArray.getJSONObject(j);
                    if(yetToBackupObj.getString("caption").equals("false")){
                        String filePath=yetToBackupObj.getString("path");
                        if((localFilePathsHM.get(filePath)!=null) && (alreadyBackedupFilePathsHM.get(filePath)==null)){
                            System.out.println("Backup123:"+filePath);
                            yetToBackupObj.put("index",j);
                            yetToBackupFilePaths.put(yetToBackupObj);
                            alreadyBackedupFilePathsHM.put(filePath,true);
                        }
                        else{
//                            remove the object
                            System.out.println("Removed:"+j);
                            yetToBackupObj.put("index",j);
                            removePaths.put(yetToBackupObj);
                        }
                    }

                }
                break;
            }
        }

        JSONObject returnObject=new JSONObject();

        returnObject.put("backupPaths",yetToBackupFilePaths);
        returnObject.put("removePaths",removePaths);

        return returnObject;
    }

    public static void removeFilesFromBackup(String broadcastId,ArrayList<Integer> removeFilePaths){
        JSONObject Whole_obj = null;
        try {
            Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
            JSONArray broadcastsArray=Whole_obj.getJSONArray("broadcasts");
            for(int i=0;i<broadcastsArray.length();i++) {
                JSONObject broadcastObject = (JSONObject) broadcastsArray.get(i);
                System.out.println("id:" + broadcastObject.get("id"));
                if (broadcastObject.get("id").equals(broadcastId)) {
                    JSONArray yetToBackupArray=broadcastObject.getJSONArray("yetToBackupFilePaths");
                    for(int j=0;j<removeFilePaths.size();j++){
                        yetToBackupArray.remove(removeFilePaths.get(j));
                    }
                    //yetToBackupArray.put(index,yetToBackupObj);
                    broadcastObject.put("yetToBackupFilePaths",yetToBackupArray);
                    broadcastsArray.put(i,broadcastObject);
                    Whole_obj.put("broadcasts",broadcastsArray);
                }
            }

            File file;
            file=new File(FILE_LOCATION_PINNED+"records.json");
            if(!file.exists())
            {
                file.createNewFile();
            }

            fileWriter = new FileWriter(file.getAbsolutePath());
            fileWriter.write(Whole_obj.toString());

            fileWriter.flush();
            fileWriter.close();
        } catch (JSONException e) {
            e.printStackTrace();
        }catch(IOException e){
            e.printStackTrace();
        }
    }


    public static String getBroadcastName(String broadcastId) {
        JSONObject Whole_obj = null;
        try {
            Whole_obj = new JSONObject(loadPinnedJSONFromAsset());
            JSONArray broadcastsArray = Whole_obj.getJSONArray("broadcasts");
            for (int i = 0; i < broadcastsArray.length(); i++) {
                JSONObject broadcastObject = (JSONObject) broadcastsArray.get(i);
                System.out.println("id:" + broadcastObject.get("id"));
                if (broadcastObject.get("id").equals(broadcastId)) {
                    String broadcastName = broadcastObject.getString("name");
                    return broadcastName;
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }

        return null;
    }
}
